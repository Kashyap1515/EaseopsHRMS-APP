plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
    id "com.google.gms.google-services"
    id "com.google.firebase.crashlytics"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}


def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace = "com.example.easeops_hrms"
    compileSdkVersion 34
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
        coreLibraryDesugaringEnabled true
    }

    kotlinOptions {
        jvmTarget = '11'
    }

    defaultConfig {
        applicationId = "com.easeops.easeops"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdk = 22
        targetSdk = 34
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName
    }
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }
    buildTypes {
        release {
            signingConfig null
//            applicationVariants.all {
//                variant ->
//                    variant.outputs.all {
//                        outputFileName = "app-${variant.getName()}.apk"
//                    }
//            }
//            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    dexOptions {
        javaMaxHeapSize "4g"
    }

//    flavorDimensions "easeops"
//
//    productFlavors {
//        staging {
//            dimension "easeops"
//            applicationId "com.easeops.easeops.staging"
//            resValue "string", "app_name", "EaseOps Staging"
//        }
//        production {
//            dimension "easeops"
//            applicationId "com.easeops.easeops"
//            resValue "string", "app_name", "EaseOps"
//        }
//    }
}

//android.applicationVariants.all { variant ->
//    variant.mergeResources.doLast {
//        def flavor = variant.productFlavors[0].name
//        def srcDir = "src/${flavor}/google-services.json"
//        def destDir = "${buildDir}/generated/res/google-services/${variant.dirName}/"
//
//        // Check if the source file exists before copying
//        def googleServicesFile = file(srcDir)
//        if (googleServicesFile.exists()) {
//            copy {
//                from googleServicesFile
//                into destDir
//            }
//        } else {
//            println "google-services.json not found for flavor: ${flavor}"
//        }
//    }
//}

flutter {
    source = "../.."
}

dependencies {
    implementation platform('com.google.firebase:firebase-bom:32.7.4')
    implementation("com.google.firebase:firebase-analytics")
    implementation("androidx.window:window:1.0.0")
    implementation("androidx.window:window-java:1.0.0")
    coreLibraryDesugaring("com.android.tools:desugar_jdk_libs:2.1.4")
}